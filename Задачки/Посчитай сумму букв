struct Puzzle {
    descr: string,
    input: string,
    output: string,
    wrong_output: string,
    explanation: string
}

function gen_puzzle(level: int) -> Puzzle {
    
    let abc = [" ","а","б","в","г","д","е","ё","ж","з","и","й","к","л","м","н","о","п","р","с","т","у","ф","х","ц","ч","ш","щ","ъ","ы","ь","э","ю","я"];
    let map: {string: int} = {};
    gen_map(abc, map);
    let words = [
        "абрикос ","автосервис ","газета ","галстук ","ель ","датчик ","навигатор ","динамик ","камбала ","озон ","брынза ","лось ","жгут ","завод ","воск ","иск ",
        "радар ","бисер ","кекс ","желе ","ирис ","замазка ","ночлег ","вязанка ","хурма ","замазка ","цифра ","обруч ","смета ","помпон ","ягода ","грунт ",
        "бомба ","дудка ","гудок ","дуб ","лён ","драже ","нора ","калитка ","рисунок ","белка ","кастет ","парик ","юрта ","золото ","мыло ","муравей ",
        "жижа ","стакан ","втулка ","жучка ","радио ","авто ","ирис ","лом ","гель ","ухо ","зуб ","фура ","виза ","очаг ","пар ","двор ",
        "юла ","рубашка ","багет ","рожок ","кошелёк ","знак ","трибуна ","ветка ","палица ","ферзь ","академия ","галерея ","ус ","фабрика ","деревня ","линза ",
        "икона ","йогурт ","кираса "
    ];
    let numbers = [
        "ноль ","один ","два ","три ","четыре ","пять ","шесть ","семь ","восемь ","девять ","десять ","одиннадцать ","двенадцать ","тринадцать ","четырнадцать ","пятнадцать ",
        "шестнадцать ","семнадцать ","восемнадцать ","девятнадцать ","двадцать ","двадцать один ","двадцать два ","двадцать три ","двадцать четыре ","двадцать пять ",
        "двадцать шесть ","двадцать семь ","двадцать восемь ","двадцать девять ","тридцать ","тридцать один ","тридцать два ","тридцать три ","тридцать четыре ","тридцать пять ",
        "тридцать шесть ","тридцать семь ","тридцать восемь ","тридцать девять ","сорок ","сорок один ","сорок два ","сорок три ","сорок четыре ","сорок пять ","сорок шесть ",
        "сорок семь ","сорок восемь ","сорок девять ","пятьдесят ","пятьдесят один ","пятьдесят два ","пятьдесят три ","пятьдесят четыре ","пятьдесят пять ","пятьдесят шесть ",
        "пятьдесят семь ","пятьдесят восемь ","пятьдесят девять ","шестьдесят ","шестьдесят один ","шестьдесят два ","шестьдесят три ","шестьдесят четыре ","шестьдесят пять ",
        "шестьдесят шесть ","шестьдесят семь ","шестьдесят восемь ","шестьдесят девять ","семьдесят ","семьдесят один ","семьдесят два ","семьдесят три ","семьдесят четыре ",
        "семьдесят пять ","семьдесят шесть ","семьдесят семь ","семьдесят восемь ","семьдесят девять ","восемьдесят ","восемьдесят один ","восемьдесят два ","восемьдесят три ",
        "восемьдесят четыре ","восемьдесят пять ","восемьдесят шесть ","восемьдесят семь ","восемьдесят восемь ","восемьдесят девять ","девяносто ","девяносто один ","девяносто два ",
        "девяносто три ","девяносто четыре ","девяносто пять ","девяносто шесть ","девяносто семь ","девяносто восемь ","девяносто девять ","сто ","сто один ","сто два ","сто три ",
        "сто четыре ","сто пять ","сто шесть ","сто семь ","сто восемь ","сто девять ","сто десять ","сто одиннадцать ","сто двенадцать ","сто тринадцать ","сто четырнадцать ",
        "сто пятнадцать ","сто шестнадцать ","сто семнадцать ","сто восемнадцать ","сто девятнадцать ","сто двадцать ",
        "сто двадцать один ","сто двадцать два ","сто двадцать три ","сто двадцать четыре ","сто двадцать пять ","сто двадцать шесть ","сто двадцать семь ","сто двадцать восемь ",
        "сто двадцать девять ","сто тридцать ","сто тридцать один ","сто тридцать два ","сто тридцать три ","сто тридцать четыре ","сто тридцать пять ","сто тридцать шесть ",
        "сто тридцать семь ","сто тридцать восемь ","сто тридцать девять ","сто сорок ","сто сорок один ","сто сорок два ","сто сорок три ","сто сорок четыре ","сто сорок пять ",
        "сто сорок шесть ","сто сорок семь ","сто сорок восемь ","сто сорок девять ","сто пятьдесят ","сто пятьдесят один ","сто пятьдесят два ","сто пятьдесят три ","сто пятьдесят четыре ",
        "сто пятьдесят пять ","сто пятьдесят шесть ","сто пятьдесят семь ","сто пятьдесят восемь ","сто пятьдесят девять ","сто шестьдесят ","сто шестьдесят один ","сто шестьдесят два ",
        "сто шестьдесят три ","сто шестьдесят четыре ","сто шестьдесят пять ","сто шестьдесят шесть ","сто шестьдесят семь ","сто шестьдесят восемь ","сто шестьдесят девять ",
        "сто семьдесят ","сто семьдесят один ","сто семьдесят два ","сто семьдесят три ","сто семьдесят четыре ","сто семьдесят пять ","сто семьдесят шесть ","сто семьдесят семь ",
        "сто семьдесят восемь ","сто семьдесят девять ","сто восемьдесят ","сто восемьдесят один ","сто восемьдесят два ","сто восемьдесят три ","сто восемьдесят четыре ","сто восемьдесят пять ",
        "сто восемьдесят шесть ","сто восемьдесят семь ","сто восемьдесят восемь ","сто восемьдесят девять ","сто девяносто ","сто девяносто один ","сто девяносто два ","сто девяносто три ",
        "сто девяносто четыре ","сто девяносто пять ","сто девяносто шесть ","сто девяносто семь ","сто девяносто восемь ","сто девяносто девять ","двести "
    ];
    let numbers_map: {int: string} = {};
    gen_numbers_map(numbers, numbers_map);
    let input_arr = gen_input_arr(words, level);
    let input = gen_input(input_arr);
    let output_arr = gen_out_arr(input_arr, map);
    let output = gen_output(output_arr, numbers_map);
    let wrong = rand_int(level);
    let wrong_output = gen_wrong(output_arr, numbers_map, wrong);
    let header = gen_header();
    let task = gen_task();
    let example = gen_example(numbers);
    let word_example = gen_word(input_arr[0]);
    let sum: string[] = [];
    let numbers1 = gen_numbers1(word_example, map, sum);
    let answer = numbers_map[int(sum[0])];
    let descr = header + "для каждого слова, " + task + "сумму порядковых номеров каждой буквы в слове согласно алфавиту. Ответ необходимо дать буквами. " + 
        "Если слов несколько ответ запишите через пробел, например - " + example;
    let explanation = "Для того чтобы посчитать сумму порядковых номеров в слове согласно алфавиту, необходимо каждую букву представить в виде числа. Затем сложить сумму этих чисел и " +
        "записать в ответ, в виде прописного числа. Например нам дано слово " + word_example + ". В соответствии с алфавитом каждую букву обозначим числом, получится - " + numbers1 +
        " Сумма этих чисел равна " + sum[0] + ". В ответ записываем - " + answer; 
    
    return new Puzzle {
        descr: descr,
        input: input,
        output: output,
        wrong_output: wrong_output,
        explanation: explanation
    };
}

function gen_word(word: string) -> string {
    let str = "";
    for (let i = 0; i < word.length() - 1; i += 1) {
        str += word[i];
    }
    return str;
}

function gen_numbers1(word: string, map: {string: int}, sum: string[]) -> string {
    let str = "";
    let summ = 0;
    for (let i = 0; i < word.length(); i += 1) {
        summ += map[word[i]];
        if (i == word.length() - 1) {
            str += string(map[word[i]]) + ".";
            break;
        }
        str += string(map[word[i]]) + " ";
    }
    sum.push(string(summ));
    return str;
}

function gen_wrong(arr: int[], map: {int: string}, wrong: int) -> string {
    let str = "";
    for (let i = 0; i < arr.length(); i += 1) {
        if (i == wrong) {
            str += [map[arr[i] + 1],map[arr[i] - 1]][rand_int(2)];
            continue;
        }
        str += map[arr[i]];
    }
    return str;
}

function gen_numbers_map(arr: string[], map: {int: string}) {
    for	(let i = 0; i < arr.length(); i += 1) {
        map[i] = arr[i];
    }
}

function gen_output(arr: int[], map: {int: string}) -> string {
    let str = "";
    for (let i = 0; i < arr.length(); i += 1) {
        str += map[arr[i]];
    }
    return str;
}

function gen_out_arr(arr: string[], map: {string: int}) -> int[] {
    let out_arr: int[] = [];
    for (let i = 0; i < arr.length(); i += 1) {
        let cur = arr[i];
        let sum = 0;
        for (let j = 0; j < cur.length(); j += 1) {
            sum += map[cur[j]];
        }
        out_arr.push(sum);
    }
    return out_arr;
}

function gen_input(arr: string[]) -> string {
    let str = "";
    for (let i = 0; i < arr.length(); i += 1) {
        str += arr[i];
    }
    return str;
}

function gen_map(abc: string[], map: {string: int}) {
    for	(let i = 0; i < abc.length(); i += 1) {
        map[abc[i]] = i;
    }
}

function gen_input_arr(words: string[], level: int) -> string[] {
    let arr: string[] = [];
    let map: {int: int} = {};
    for (let i = 0; i < level; i += 1) {
        let cur = rand_int(words.length());
        while(map.contains(cur) && cur < words.length() - 1) {
            cur += 1;
        }
        while(map.contains(cur) && cur > 0) {
            cur -= 1;
        }
        arr.push(words[cur]);
        map[cur] = cur;
    }
    return arr;
}

function gen_example(numbers: string[]) -> string {
    let first = rand_int(numbers.length());
    let second = rand_int(numbers.length());
    let str = numbers[first] + " " + numbers[second];
    return str;    
}

function gen_task() -> string {
    let tasks = ["определите ","запишите ","укажите ","выпишите ","установите ","обозначьте ","выясните ","посчитайте "];
    return tasks[rand_int(tasks.length())];
}

function gen_header() -> string {
    let headers = ["Дано некоторое количество слов, ",
                   "Перед вами некоторое количество слов, ",
                   "Вы видите некоторое количество слов, ",
                   "Задано некоторое количество слов, "
    ];
    return headers[rand_int(headers.length())];
}
